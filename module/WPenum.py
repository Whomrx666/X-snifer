# Obfuscated by Mr.X
# dont recode this kids:V
import base64
exec(base64.b64decode('').decode('utf-8'))
